plugins {
  id 'java-library'
  id 'application'
  alias(libs.plugins.download)
  alias(libs.plugins.graalvmNativeImage)
  alias(libs.plugins.versions)
}

def system = org.gradle.internal.os.OperatingSystem.current()
if (system.isLinux()) {
  project.ext.osArch = "x64"
  project.ext.opSystem = "linux"
  project.ext.graalExt = "tar.gz"
  project.ext.graalHome = "graalvm"
  project.ext.upxArch = "amd64_linux"
  project.ext.upxExt = "tar.xz"
} else if (system.isMacOsX()) {
  project.ext.osArch = "x64"
  project.ext.opSystem = "macos"
  project.ext.graalExt = "tar.gz"
  project.ext.graalHome = "graalvm/Contents/Home"
  project.ext.upxArch = "amd64_darwin" // not supported :(
  project.ext.upxExt = "tar.xz"
} else if (system.isWindows()) {
  project.ext.osArch = "x64"
  project.ext.opSystem = "windows"
  project.ext.graalExt = "zip"
  project.ext.graalHome = "graalvm"
  project.ext.upxArch = "win64"
  project.ext.upxExt = "zip"
}

base {
  archivesBaseName = 'pq'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = 'https://oss.sonatype.org/content/repositories/snapshots'
  }
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

test {
  useJUnitPlatform()

  reports {
    html.required = true
  }
}

javadoc.options {
  addStringOption('-release', '21')
}

compileJava {
  options.compilerArgs << '-Xlint:unchecked'
  options.compilerArgs << '-Xlint:rawtypes'
  options.release = 21
}

compileTestJava {
  options.compilerArgs << '-Xlint:unchecked'
  options.compilerArgs << '-Xlint:rawtypes'
  options.release = 21
}

dependencies {
  implementation(libs.picocli)
  implementation(libs.parquetColumn)
  implementation(libs.parquetHadoop)
  implementation(libs.petitparser)
  implementation(libs.minimalJson)
  // force version of snappy
  implementation(libs.snappy)
  implementation(libs.hadoopMapreduceClient) {
    exclude group: 'org.apache.avro', module: 'avro'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    exclude group: 'org.apache.hadoop', module: 'hadoop-yarn-client'
    exclude group: 'org.apache.hadoop', module: 'hadoop-yarn-common'
    exclude group: 'org.apache.hadoop', module: 'hadoop-hdfs-client'
    exclude group: 'com.google.inject.extensions', module: 'guice-servlet'
    exclude group: 'io.netty', module: 'netty'
    exclude group: 'com.google.protobuf', module: 'protobuf-java'
    exclude group: 'javax.ws.rs', module: 'javax.ws.rs-api'
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'org.slf4j', module: 'slf4j-reload4j'
  }
  implementation(libs.hadoopCommon) {
    exclude group: 'org.apache.avro', module: 'avro'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    exclude group: 'org.apache.kerby', module: 'kerb-core'
    exclude group: 'org.apache.curator', module: 'curator-recipes'
    exclude group: 'org.apache.curator', module: 'curator-client'
    exclude group: 'org.apache.hadoop', module: 'hadoop-annotations'
    exclude group: 'org.apache.hadoop', module: 'hadoop-auth'
    exclude group: 'org.apache.hadoop.thirdparty', module: 'hadoop-shaded-protobuf_3_7'
    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    exclude group: 'org.apache.commons', module: 'commons-text'
    exclude group: 'org.apache.commons', module: 'commons-math3'
    exclude group: 'org.apache.commons', module: 'commons-lang3'
    exclude group: 'org.apache.commons', module: 'commons-configuration2'
    exclude group: 'org.apache.zookeeper', module: 'zookeeper'
    exclude group: 'org.eclipse.jetty', module: 'jetty-server'
    exclude group: 'org.eclipse.jetty', module: 'jetty-servlet'
    exclude group: 'org.eclipse.jetty', module: 'jetty-webapp'
    exclude group: 'org.eclipse.jetty', module: 'jetty-util'
    exclude group: 'javax.servlet', module: 'javax.servlet-api'
    exclude group: 'javax.servlet.jsp', module: 'jsp-api'
    exclude group: 'com.sun.jersey', module: 'jersey-json'
    exclude group: 'com.sun.jersey', module: 'jersey-core'
    exclude group: 'com.sun.jersey', module: 'jersey-servlet'
    exclude group: 'com.sun.jersey', module: 'jersey-server'
    exclude group: 'com.google.guava', module: 'guava'
    exclude group: 'com.google.code.findbugs', module: 'jsr305'
    exclude group: 'com.google.protobuf', module: 'protobuf-java'
    exclude group: 'commons-beanutils', module: 'commons-beanutils'
    exclude group: 'commons-codec', module: 'commons-codec'
    exclude group: 'commons-io', module: 'commons-io'
    exclude group: 'commons-net', module: 'commons-net'
    exclude group: 'commons-cli', module: 'commons-cli'
    exclude group: 'commons-pool', module: 'commons-pool'
    exclude group: 'ch.qos.reload4j', module: 'reload4j'
    exclude group: 'org.slf4j', module: 'slf4j-reload4j'
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    exclude group: 'log4j', module: 'log4j'
    exclude group: 'com.jcraft', module: 'jsch'
    exclude group: 'dnsjava', module: 'dnsjava'
    exclude group: 'com.google.code.gson', module: 'gson'
    exclude group: 'org.apache.kerby', module: 'kerb-simplekdc'
    exclude group: 'com.nimbusds', module: 'nimbus-jose-jwt'
    exclude group: 'net.minidev', module: 'json-smart'
    exclude group: 'org.apache.curator', module: 'curator-framework'
    exclude group: 'jakarta.activation', module: 'jakarta.activation-api'
  }
  runtimeOnly(libs.logbackClassic)

  testImplementation(libs.junitJupiter)
  testRuntimeOnly(libs.junitRunner)
  testImplementation(libs.mockitoCore)
  testImplementation(libs.mockitoJunit)
  testImplementation(libs.assertj)
  testImplementation(libs.systemStubs)
}

application {
  mainClass = 'pq.App'
}

task fatJar(type: Jar) {
  manifest {
    attributes "Main-Class": "pq.App"
  }
  archiveClassifier = "all"
  duplicatesStrategy = "warn"
  from {
    configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
  with jar
}

task downloadGraalvm(type: Download) {
  src "https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${graalvm_version}/graalvm-community-jdk-${graalvm_version}_${opSystem}-${osArch}_bin.${graalExt}"
  dest new java.io.File(buildDir, "graalvm.tar.gz")
  onlyIfModified true
}

task extractGraalvm(dependsOn: downloadGraalvm, type: Exec) {
  workingDir "$buildDir"
  if (system.isWindows()) {
    commandLine 'cmd', '/c', 'if not exist graalvm (mkdir graalvm) else (cd.) && tar -xvf graalvm.tar.gz -C graalvm --strip-components 1'
  } else {
    commandLine 'bash', '-c', 'mkdir -p graalvm && tar -xvf graalvm.tar.gz -C graalvm --strip-components 1'
  }
}

nativeImage {
  graalVmHome = "${buildDir}/${graalHome}"
  mainClass = "pq.App"
  executableName = "pq"
  arguments(
          '-J-Xms2G',
          '-J-Xmx2G',
          '--verbose',
          '--report-unsupported-elements-at-runtime',
          '--no-fallback',
          '--allow-incomplete-classpath',
          '--initialize-at-build-time=ch.qos.logback',
          '--initialize-at-run-time=com.oracle.truffle.js.scriptengine.GraalJSEngineFactory',
          '-H:IncludeResources=logback.xml',
          '-H:ReflectionConfigurationFiles=src/native-image/reflect-config.json',
          '-H:JNIConfigurationFiles=src/native-image/jni-config.json',
          '-H:ResourceConfigurationFiles=src/native-image/resource-config.json'
  )
}

task downloadUpx(type: Download) {
  src "https://github.com/upx/upx/releases/download/v${upx_version}/upx-${upx_version}-${upxArch}.${upxExt}"
  dest new java.io.File(buildDir, "upx.tar.xz")
  onlyIfModified true
}

task extractUpx(dependsOn: downloadUpx, type: Exec) {
  workingDir "$buildDir"
  if (system.isWindows()) {
    commandLine 'cmd', '/c', 'if not exist upx (mkdir upx) else (cd.) && tar -xvf upx.tar.xz -C upx --strip-components 1'
  } else {
    commandLine 'bash', '-c', 'mkdir -p upx && tar -xvf upx.tar.xz -C upx --strip-components 1'
  }
}

task compressExecutable(dependsOn: extractUpx, type: Exec) {
  workingDir "$buildDir/upx"
  if (system.isWindows()) {
    commandLine 'cmd', '/c', 'upx --best ..\native-image\pq.exe'
  } else {
    commandLine 'bash', '-c', './upx --best ../native-image/pq'
  }
}

installNativeImage {
  dependsOn extractGraalvm
}
